//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DistributieTESTWebServices.SMSService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SMSServiceBinding", Namespace="urn:SMSService")]
    public partial class SMSServiceService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback sendOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSmsAuthKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendWapPushOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendVCalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendVCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSmsFlashOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback openSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSessionWapPushOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSessionVCalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSessionVCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSessionSmsFlashOperationCompleted;
        
        private System.Threading.SendOrPostCallback showIpOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SMSServiceService() {
            this.Url = global::DistributieTESTWebServices.Properties.Settings.Default.DistributieTESTWebServices_SMSService_SMSServiceService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event sendCompletedEventHandler sendCompleted;
        
        /// <remarks/>
        public event SendSmsCompletedEventHandler SendSmsCompleted;
        
        /// <remarks/>
        public event sendSmsAuthKeyCompletedEventHandler sendSmsAuthKeyCompleted;
        
        /// <remarks/>
        public event sendWapPushCompletedEventHandler sendWapPushCompleted;
        
        /// <remarks/>
        public event sendVCalendarCompletedEventHandler sendVCalendarCompleted;
        
        /// <remarks/>
        public event sendVCardCompletedEventHandler sendVCardCompleted;
        
        /// <remarks/>
        public event sendSmsFlashCompletedEventHandler sendSmsFlashCompleted;
        
        /// <remarks/>
        public event checkStatusCompletedEventHandler checkStatusCompleted;
        
        /// <remarks/>
        public event openSessionCompletedEventHandler openSessionCompleted;
        
        /// <remarks/>
        public event closeSessionCompletedEventHandler closeSessionCompleted;
        
        /// <remarks/>
        public event sendSessionCompletedEventHandler sendSessionCompleted;
        
        /// <remarks/>
        public event sendSessionWapPushCompletedEventHandler sendSessionWapPushCompleted;
        
        /// <remarks/>
        public event sendSessionVCalendarCompletedEventHandler sendSessionVCalendarCompleted;
        
        /// <remarks/>
        public event sendSessionVCardCompletedEventHandler sendSessionVCardCompleted;
        
        /// <remarks/>
        public event sendSessionSmsFlashCompletedEventHandler sendSessionSmsFlashCompleted;
        
        /// <remarks/>
        public event showIpCompletedEventHandler showIpCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#send", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("id")]
        public string send(string phone, string message, System.DateTime date, string sender, int validity) {
            object[] results = this.Invoke("send", new object[] {
                        phone,
                        message,
                        date,
                        sender,
                        validity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendAsync(string phone, string message, System.DateTime date, string sender, int validity) {
            this.sendAsync(phone, message, date, sender, validity, null);
        }
        
        /// <remarks/>
        public void sendAsync(string phone, string message, System.DateTime date, string sender, int validity, object userState) {
            if ((this.sendOperationCompleted == null)) {
                this.sendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendOperationCompleted);
            }
            this.InvokeAsync("send", new object[] {
                        phone,
                        message,
                        date,
                        sender,
                        validity}, this.sendOperationCompleted, userState);
        }
        
        private void OnsendOperationCompleted(object arg) {
            if ((this.sendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendCompleted(this, new sendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#SendSms", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("id")]
        public string SendSms(string username, string password, string source, string destination, string body, bool isUnicode, System.DateTime scheduleDate, string callbackUrl) {
            object[] results = this.Invoke("SendSms", new object[] {
                        username,
                        password,
                        source,
                        destination,
                        body,
                        isUnicode,
                        scheduleDate,
                        callbackUrl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmsAsync(string username, string password, string source, string destination, string body, bool isUnicode, System.DateTime scheduleDate, string callbackUrl) {
            this.SendSmsAsync(username, password, source, destination, body, isUnicode, scheduleDate, callbackUrl, null);
        }
        
        /// <remarks/>
        public void SendSmsAsync(string username, string password, string source, string destination, string body, bool isUnicode, System.DateTime scheduleDate, string callbackUrl, object userState) {
            if ((this.SendSmsOperationCompleted == null)) {
                this.SendSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmsOperationCompleted);
            }
            this.InvokeAsync("SendSms", new object[] {
                        username,
                        password,
                        source,
                        destination,
                        body,
                        isUnicode,
                        scheduleDate,
                        callbackUrl}, this.SendSmsOperationCompleted, userState);
        }
        
        private void OnSendSmsOperationCompleted(object arg) {
            if ((this.SendSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmsCompleted(this, new SendSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#sendSmsAuthKey", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("id")]
        public string sendSmsAuthKey(string username, string authKey, string sender, string recipient, string message, System.DateTime scheduleDate, int validity, string callbackUrl) {
            object[] results = this.Invoke("sendSmsAuthKey", new object[] {
                        username,
                        authKey,
                        sender,
                        recipient,
                        message,
                        scheduleDate,
                        validity,
                        callbackUrl});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendSmsAuthKeyAsync(string username, string authKey, string sender, string recipient, string message, System.DateTime scheduleDate, int validity, string callbackUrl) {
            this.sendSmsAuthKeyAsync(username, authKey, sender, recipient, message, scheduleDate, validity, callbackUrl, null);
        }
        
        /// <remarks/>
        public void sendSmsAuthKeyAsync(string username, string authKey, string sender, string recipient, string message, System.DateTime scheduleDate, int validity, string callbackUrl, object userState) {
            if ((this.sendSmsAuthKeyOperationCompleted == null)) {
                this.sendSmsAuthKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSmsAuthKeyOperationCompleted);
            }
            this.InvokeAsync("sendSmsAuthKey", new object[] {
                        username,
                        authKey,
                        sender,
                        recipient,
                        message,
                        scheduleDate,
                        validity,
                        callbackUrl}, this.sendSmsAuthKeyOperationCompleted, userState);
        }
        
        private void OnsendSmsAuthKeyOperationCompleted(object arg) {
            if ((this.sendSmsAuthKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSmsAuthKeyCompleted(this, new sendSmsAuthKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#sendWapPush", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("id")]
        public string sendWapPush(string phone, string url, string message, System.DateTime date, string sender, int validity) {
            object[] results = this.Invoke("sendWapPush", new object[] {
                        phone,
                        url,
                        message,
                        date,
                        sender,
                        validity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendWapPushAsync(string phone, string url, string message, System.DateTime date, string sender, int validity) {
            this.sendWapPushAsync(phone, url, message, date, sender, validity, null);
        }
        
        /// <remarks/>
        public void sendWapPushAsync(string phone, string url, string message, System.DateTime date, string sender, int validity, object userState) {
            if ((this.sendWapPushOperationCompleted == null)) {
                this.sendWapPushOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendWapPushOperationCompleted);
            }
            this.InvokeAsync("sendWapPush", new object[] {
                        phone,
                        url,
                        message,
                        date,
                        sender,
                        validity}, this.sendWapPushOperationCompleted, userState);
        }
        
        private void OnsendWapPushOperationCompleted(object arg) {
            if ((this.sendWapPushCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendWapPushCompleted(this, new sendWapPushCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#sendVCalendar", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string sendVCalendar(string recipient, string subject, string location, string description, System.DateTime startDatetime, System.DateTime endDatetime, System.DateTime alarmDatetime, System.DateTime sendDatetime, string sender, int validity) {
            object[] results = this.Invoke("sendVCalendar", new object[] {
                        recipient,
                        subject,
                        location,
                        description,
                        startDatetime,
                        endDatetime,
                        alarmDatetime,
                        sendDatetime,
                        sender,
                        validity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendVCalendarAsync(string recipient, string subject, string location, string description, System.DateTime startDatetime, System.DateTime endDatetime, System.DateTime alarmDatetime, System.DateTime sendDatetime, string sender, int validity) {
            this.sendVCalendarAsync(recipient, subject, location, description, startDatetime, endDatetime, alarmDatetime, sendDatetime, sender, validity, null);
        }
        
        /// <remarks/>
        public void sendVCalendarAsync(string recipient, string subject, string location, string description, System.DateTime startDatetime, System.DateTime endDatetime, System.DateTime alarmDatetime, System.DateTime sendDatetime, string sender, int validity, object userState) {
            if ((this.sendVCalendarOperationCompleted == null)) {
                this.sendVCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendVCalendarOperationCompleted);
            }
            this.InvokeAsync("sendVCalendar", new object[] {
                        recipient,
                        subject,
                        location,
                        description,
                        startDatetime,
                        endDatetime,
                        alarmDatetime,
                        sendDatetime,
                        sender,
                        validity}, this.sendVCalendarOperationCompleted, userState);
        }
        
        private void OnsendVCalendarOperationCompleted(object arg) {
            if ((this.sendVCalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendVCalendarCompleted(this, new sendVCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#sendVCard", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string sendVCard(string recipient, string firstname, string lastname, string mobilephone, string email, string organization, System.DateTime sendDatetime, string sender, int validity) {
            object[] results = this.Invoke("sendVCard", new object[] {
                        recipient,
                        firstname,
                        lastname,
                        mobilephone,
                        email,
                        organization,
                        sendDatetime,
                        sender,
                        validity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendVCardAsync(string recipient, string firstname, string lastname, string mobilephone, string email, string organization, System.DateTime sendDatetime, string sender, int validity) {
            this.sendVCardAsync(recipient, firstname, lastname, mobilephone, email, organization, sendDatetime, sender, validity, null);
        }
        
        /// <remarks/>
        public void sendVCardAsync(string recipient, string firstname, string lastname, string mobilephone, string email, string organization, System.DateTime sendDatetime, string sender, int validity, object userState) {
            if ((this.sendVCardOperationCompleted == null)) {
                this.sendVCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendVCardOperationCompleted);
            }
            this.InvokeAsync("sendVCard", new object[] {
                        recipient,
                        firstname,
                        lastname,
                        mobilephone,
                        email,
                        organization,
                        sendDatetime,
                        sender,
                        validity}, this.sendVCardOperationCompleted, userState);
        }
        
        private void OnsendVCardOperationCompleted(object arg) {
            if ((this.sendVCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendVCardCompleted(this, new sendVCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#sendSmsFlash", RequestNamespace="http://ws.bizpack.ro/service.php", ResponseNamespace="http://ws.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("id")]
        public string sendSmsFlash(string phone, string message, System.DateTime date, string sender, int validity) {
            object[] results = this.Invoke("sendSmsFlash", new object[] {
                        phone,
                        message,
                        date,
                        sender,
                        validity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendSmsFlashAsync(string phone, string message, System.DateTime date, string sender, int validity) {
            this.sendSmsFlashAsync(phone, message, date, sender, validity, null);
        }
        
        /// <remarks/>
        public void sendSmsFlashAsync(string phone, string message, System.DateTime date, string sender, int validity, object userState) {
            if ((this.sendSmsFlashOperationCompleted == null)) {
                this.sendSmsFlashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSmsFlashOperationCompleted);
            }
            this.InvokeAsync("sendSmsFlash", new object[] {
                        phone,
                        message,
                        date,
                        sender,
                        validity}, this.sendSmsFlashOperationCompleted, userState);
        }
        
        private void OnsendSmsFlashOperationCompleted(object arg) {
            if ((this.sendSmsFlashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSmsFlashCompleted(this, new sendSmsFlashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#checkStatus", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("status")]
        public string checkStatus(string messageId) {
            object[] results = this.Invoke("checkStatus", new object[] {
                        messageId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkStatusAsync(string messageId) {
            this.checkStatusAsync(messageId, null);
        }
        
        /// <remarks/>
        public void checkStatusAsync(string messageId, object userState) {
            if ((this.checkStatusOperationCompleted == null)) {
                this.checkStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckStatusOperationCompleted);
            }
            this.InvokeAsync("checkStatus", new object[] {
                        messageId}, this.checkStatusOperationCompleted, userState);
        }
        
        private void OncheckStatusOperationCompleted(object arg) {
            if ((this.checkStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkStatusCompleted(this, new checkStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#openSession", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("sessid")]
        public string openSession(string username, string password) {
            object[] results = this.Invoke("openSession", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void openSessionAsync(string username, string password) {
            this.openSessionAsync(username, password, null);
        }
        
        /// <remarks/>
        public void openSessionAsync(string username, string password, object userState) {
            if ((this.openSessionOperationCompleted == null)) {
                this.openSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenSessionOperationCompleted);
            }
            this.InvokeAsync("openSession", new object[] {
                        username,
                        password}, this.openSessionOperationCompleted, userState);
        }
        
        private void OnopenSessionOperationCompleted(object arg) {
            if ((this.openSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.openSessionCompleted(this, new openSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#closeSession", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public bool closeSession(string sessid) {
            object[] results = this.Invoke("closeSession", new object[] {
                        sessid});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void closeSessionAsync(string sessid) {
            this.closeSessionAsync(sessid, null);
        }
        
        /// <remarks/>
        public void closeSessionAsync(string sessid, object userState) {
            if ((this.closeSessionOperationCompleted == null)) {
                this.closeSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseSessionOperationCompleted);
            }
            this.InvokeAsync("closeSession", new object[] {
                        sessid}, this.closeSessionOperationCompleted, userState);
        }
        
        private void OncloseSessionOperationCompleted(object arg) {
            if ((this.closeSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeSessionCompleted(this, new closeSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#sendSession", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("id")]
        public string sendSession(string sessid, string phone, string message, System.DateTime date, string sender, int validity) {
            object[] results = this.Invoke("sendSession", new object[] {
                        sessid,
                        phone,
                        message,
                        date,
                        sender,
                        validity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendSessionAsync(string sessid, string phone, string message, System.DateTime date, string sender, int validity) {
            this.sendSessionAsync(sessid, phone, message, date, sender, validity, null);
        }
        
        /// <remarks/>
        public void sendSessionAsync(string sessid, string phone, string message, System.DateTime date, string sender, int validity, object userState) {
            if ((this.sendSessionOperationCompleted == null)) {
                this.sendSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSessionOperationCompleted);
            }
            this.InvokeAsync("sendSession", new object[] {
                        sessid,
                        phone,
                        message,
                        date,
                        sender,
                        validity}, this.sendSessionOperationCompleted, userState);
        }
        
        private void OnsendSessionOperationCompleted(object arg) {
            if ((this.sendSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSessionCompleted(this, new sendSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#sendSessionWapPush", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("id")]
        public string sendSessionWapPush(string sessid, string phone, string url, string message, System.DateTime date, string sender, int validity) {
            object[] results = this.Invoke("sendSessionWapPush", new object[] {
                        sessid,
                        phone,
                        url,
                        message,
                        date,
                        sender,
                        validity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendSessionWapPushAsync(string sessid, string phone, string url, string message, System.DateTime date, string sender, int validity) {
            this.sendSessionWapPushAsync(sessid, phone, url, message, date, sender, validity, null);
        }
        
        /// <remarks/>
        public void sendSessionWapPushAsync(string sessid, string phone, string url, string message, System.DateTime date, string sender, int validity, object userState) {
            if ((this.sendSessionWapPushOperationCompleted == null)) {
                this.sendSessionWapPushOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSessionWapPushOperationCompleted);
            }
            this.InvokeAsync("sendSessionWapPush", new object[] {
                        sessid,
                        phone,
                        url,
                        message,
                        date,
                        sender,
                        validity}, this.sendSessionWapPushOperationCompleted, userState);
        }
        
        private void OnsendSessionWapPushOperationCompleted(object arg) {
            if ((this.sendSessionWapPushCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSessionWapPushCompleted(this, new sendSessionWapPushCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#sendSessionVCalendar", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string sendSessionVCalendar(string sessid, string recipient, string subject, string location, string description, System.DateTime startDatetime, System.DateTime endDatetime, System.DateTime alarmDatetime, System.DateTime sendDatetime, string sender, int validity) {
            object[] results = this.Invoke("sendSessionVCalendar", new object[] {
                        sessid,
                        recipient,
                        subject,
                        location,
                        description,
                        startDatetime,
                        endDatetime,
                        alarmDatetime,
                        sendDatetime,
                        sender,
                        validity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendSessionVCalendarAsync(string sessid, string recipient, string subject, string location, string description, System.DateTime startDatetime, System.DateTime endDatetime, System.DateTime alarmDatetime, System.DateTime sendDatetime, string sender, int validity) {
            this.sendSessionVCalendarAsync(sessid, recipient, subject, location, description, startDatetime, endDatetime, alarmDatetime, sendDatetime, sender, validity, null);
        }
        
        /// <remarks/>
        public void sendSessionVCalendarAsync(string sessid, string recipient, string subject, string location, string description, System.DateTime startDatetime, System.DateTime endDatetime, System.DateTime alarmDatetime, System.DateTime sendDatetime, string sender, int validity, object userState) {
            if ((this.sendSessionVCalendarOperationCompleted == null)) {
                this.sendSessionVCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSessionVCalendarOperationCompleted);
            }
            this.InvokeAsync("sendSessionVCalendar", new object[] {
                        sessid,
                        recipient,
                        subject,
                        location,
                        description,
                        startDatetime,
                        endDatetime,
                        alarmDatetime,
                        sendDatetime,
                        sender,
                        validity}, this.sendSessionVCalendarOperationCompleted, userState);
        }
        
        private void OnsendSessionVCalendarOperationCompleted(object arg) {
            if ((this.sendSessionVCalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSessionVCalendarCompleted(this, new sendSessionVCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#sendSessionVCard", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string sendSessionVCard(string sessid, string recipient, string firstname, string lastname, string mobilephone, string email, string organization, System.DateTime sendDatetime, string sender, int validity) {
            object[] results = this.Invoke("sendSessionVCard", new object[] {
                        sessid,
                        recipient,
                        firstname,
                        lastname,
                        mobilephone,
                        email,
                        organization,
                        sendDatetime,
                        sender,
                        validity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendSessionVCardAsync(string sessid, string recipient, string firstname, string lastname, string mobilephone, string email, string organization, System.DateTime sendDatetime, string sender, int validity) {
            this.sendSessionVCardAsync(sessid, recipient, firstname, lastname, mobilephone, email, organization, sendDatetime, sender, validity, null);
        }
        
        /// <remarks/>
        public void sendSessionVCardAsync(string sessid, string recipient, string firstname, string lastname, string mobilephone, string email, string organization, System.DateTime sendDatetime, string sender, int validity, object userState) {
            if ((this.sendSessionVCardOperationCompleted == null)) {
                this.sendSessionVCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSessionVCardOperationCompleted);
            }
            this.InvokeAsync("sendSessionVCard", new object[] {
                        sessid,
                        recipient,
                        firstname,
                        lastname,
                        mobilephone,
                        email,
                        organization,
                        sendDatetime,
                        sender,
                        validity}, this.sendSessionVCardOperationCompleted, userState);
        }
        
        private void OnsendSessionVCardOperationCompleted(object arg) {
            if ((this.sendSessionVCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSessionVCardCompleted(this, new sendSessionVCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#sendSessionSmsFlash", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string sendSessionSmsFlash(string sessid, string phone, string message, System.DateTime date, string sender, int validity) {
            object[] results = this.Invoke("sendSessionSmsFlash", new object[] {
                        sessid,
                        phone,
                        message,
                        date,
                        sender,
                        validity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendSessionSmsFlashAsync(string sessid, string phone, string message, System.DateTime date, string sender, int validity) {
            this.sendSessionSmsFlashAsync(sessid, phone, message, date, sender, validity, null);
        }
        
        /// <remarks/>
        public void sendSessionSmsFlashAsync(string sessid, string phone, string message, System.DateTime date, string sender, int validity, object userState) {
            if ((this.sendSessionSmsFlashOperationCompleted == null)) {
                this.sendSessionSmsFlashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSessionSmsFlashOperationCompleted);
            }
            this.InvokeAsync("sendSessionSmsFlash", new object[] {
                        sessid,
                        phone,
                        message,
                        date,
                        sender,
                        validity}, this.sendSessionSmsFlashOperationCompleted, userState);
        }
        
        private void OnsendSessionSmsFlashOperationCompleted(object arg) {
            if ((this.sendSessionSmsFlashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSessionSmsFlashCompleted(this, new sendSessionSmsFlashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.xmlsoap.org/soap/envelope/#SMSService#showIp", RequestNamespace="http://wsi.bizpack.ro/service.php", ResponseNamespace="http://wsi.bizpack.ro/service.php")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string showIp() {
            object[] results = this.Invoke("showIp", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void showIpAsync() {
            this.showIpAsync(null);
        }
        
        /// <remarks/>
        public void showIpAsync(object userState) {
            if ((this.showIpOperationCompleted == null)) {
                this.showIpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnshowIpOperationCompleted);
            }
            this.InvokeAsync("showIp", new object[0], this.showIpOperationCompleted, userState);
        }
        
        private void OnshowIpOperationCompleted(object arg) {
            if ((this.showIpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.showIpCompleted(this, new showIpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendCompletedEventHandler(object sender, sendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void SendSmsCompletedEventHandler(object sender, SendSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendSmsAuthKeyCompletedEventHandler(object sender, sendSmsAuthKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSmsAuthKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSmsAuthKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendWapPushCompletedEventHandler(object sender, sendWapPushCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendWapPushCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendWapPushCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendVCalendarCompletedEventHandler(object sender, sendVCalendarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendVCalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendVCalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendVCardCompletedEventHandler(object sender, sendVCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendVCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendVCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendSmsFlashCompletedEventHandler(object sender, sendSmsFlashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSmsFlashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSmsFlashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void checkStatusCompletedEventHandler(object sender, checkStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void openSessionCompletedEventHandler(object sender, openSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class openSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal openSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void closeSessionCompletedEventHandler(object sender, closeSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class closeSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal closeSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendSessionCompletedEventHandler(object sender, sendSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendSessionWapPushCompletedEventHandler(object sender, sendSessionWapPushCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSessionWapPushCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSessionWapPushCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendSessionVCalendarCompletedEventHandler(object sender, sendSessionVCalendarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSessionVCalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSessionVCalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendSessionVCardCompletedEventHandler(object sender, sendSessionVCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSessionVCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSessionVCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void sendSessionSmsFlashCompletedEventHandler(object sender, sendSessionSmsFlashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSessionSmsFlashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSessionSmsFlashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void showIpCompletedEventHandler(object sender, showIpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class showIpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal showIpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591